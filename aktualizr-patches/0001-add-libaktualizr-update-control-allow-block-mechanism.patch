Submodule aktualizr contains modified content
diff --git a/aktualizr/include/libaktualizr/aktualizr.h b/aktualizr/include/libaktualizr/aktualizr.h
index af7274e8..d2938bdd 100644
--- a/aktualizr/include/libaktualizr/aktualizr.h
+++ b/aktualizr/include/libaktualizr/aktualizr.h
@@ -308,6 +308,11 @@ class Aktualizr {
    */
   void SetSecondaryData(const Uptane::EcuSerial& ecu, const std::string& data);
 
+  /* Make it possible for the client application to disable download/install of updates
+   * @param status true to disable updates and false to enable updates
+   */
+  void DisableUpdates(bool status);
+
   /**
    * Returns a list of the registered Secondaries, along with some associated
    * metadata
@@ -350,6 +355,8 @@ class Aktualizr {
   std::shared_ptr<INvStorage> storage_;
   std::shared_ptr<event::Channel> sig_;
   std::unique_ptr<api::CommandQueue> api_queue_;
+
+  bool updates_disabled_;
 };
 
 #endif  // AKTUALIZR_H_
diff --git a/aktualizr/src/libaktualizr/primary/aktualizr.cc b/aktualizr/src/libaktualizr/primary/aktualizr.cc
index 52685cf7..016ac0d6 100644
--- a/aktualizr/src/libaktualizr/primary/aktualizr.cc
+++ b/aktualizr/src/libaktualizr/primary/aktualizr.cc
@@ -26,6 +26,8 @@ Aktualizr::Aktualizr(Config config, std::shared_ptr<INvStorage> storage_in,
   storage_->importData(config_.import);
 
   uptane_client_ = std::make_shared<SotaUptaneClient>(config_, storage_, http_in, sig_);
+
+  updates_disabled_ = false;
 }
 
 Aktualizr::~Aktualizr() { api_queue_.reset(nullptr); }
@@ -35,9 +37,13 @@ void Aktualizr::Initialize() {
   api_queue_->run();
 }
 
+void Aktualizr::DisableUpdates(bool status) {
+  updates_disabled_ = status;
+}
+
 bool Aktualizr::UptaneCycle() {
   result::UpdateCheck update_result = CheckUpdates().get();
-  if (update_result.updates.empty()) {
+  if (update_result.updates.empty() || updates_disabled_) {
     if (update_result.status == result::UpdateStatus::kError) {
       // If the metadata verification failed, inform the backend immediately.
       SendManifest().get();
